{
  "version": 3,
  "sources": ["../../src/services/credentials.ts"],
  "sourcesContent": ["import bcrypt from \"bcryptjs\";\nimport { User } from \"./../models/User\";\nimport UserSchemaModel from \"./../models/mongo/user-schema-model\";\nimport { Credential } from \"ts-models\";\n\nexport function verify(\n  username: string,\n  password: string\n): Promise<String> {\n  return new Promise<String>((resolve, reject) => {\n    UserSchemaModel\n      .find({ username })\n      .then((found) => {\n        if (found && found.length === 1) return found[0];\n        else reject(\"Invalid username or password\");\n      })\n      .then((credsOnFile) => {\n        if (credsOnFile)\n          bcrypt.compare(\n            password,\n            credsOnFile.hashedPassword,\n            (_, result) => {\n              console.log(\n                \"Verified\",\n                result,\n                credsOnFile.username\n              );\n              if (result) resolve(credsOnFile.username);\n              else reject(\"Invalid username or password\");\n            }\n          );\n        else reject(\"Invalid username or password\");\n      });\n  });\n}\n\nexport function checkExists(username: string) {\n  return new Promise<boolean>((resolve, reject) => {\n    UserSchemaModel\n      .find({ username })\n      .then((found) => resolve(found && found.length > 0));\n  });\n}\n\nexport function create(username: string, password: string) {\n  return new Promise<Credential>((resolve, reject) => {\n    if (!username || !password) {\n      reject(\"must provide username and password\");\n    }\n    UserSchemaModel\n      .find({ username })\n      .then((found: Credential[]) => {\n        if (found.length) reject(\"username exists\");\n      })\n      .then(() =>\n        bcrypt\n          .genSalt(10)\n          .then((salt: string) => bcrypt.hash(password, salt))\n          .then((hashedPassword: string) => {\n            const creds = new UserSchemaModel({\n              username,\n              hashedPassword\n            });\n            creds.save().then((created: Credential) => {\n              if (created) resolve(created);\n            });\n          })\n      );\n  });\n}\n\nexport default { checkExists, create, verify };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAmB;AAEnB,+BAA4B;AAGrB,SAAS,OACd,UACA,UACiB;AACjB,SAAO,IAAI,QAAgB,CAAC,SAAS,WAAW;AAC9C,6BAAAA,QACG,KAAK,EAAE,SAAS,CAAC,EACjB,KAAK,CAAC,UAAU;AACf,UAAI,SAAS,MAAM,WAAW;AAAG,eAAO,MAAM,CAAC;AAAA;AAC1C,eAAO,8BAA8B;AAAA,IAC5C,CAAC,EACA,KAAK,CAAC,gBAAgB;AACrB,UAAI;AACF,wBAAAC,QAAO;AAAA,UACL;AAAA,UACA,YAAY;AAAA,UACZ,CAAC,GAAG,WAAW;AACb,oBAAQ;AAAA,cACN;AAAA,cACA;AAAA,cACA,YAAY;AAAA,YACd;AACA,gBAAI;AAAQ,sBAAQ,YAAY,QAAQ;AAAA;AACnC,qBAAO,8BAA8B;AAAA,UAC5C;AAAA,QACF;AAAA;AACG,eAAO,8BAA8B;AAAA,IAC5C,CAAC;AAAA,EACL,CAAC;AACH;AAEO,SAAS,YAAY,UAAkB;AAC5C,SAAO,IAAI,QAAiB,CAAC,SAAS,WAAW;AAC/C,6BAAAD,QACG,KAAK,EAAE,SAAS,CAAC,EACjB,KAAK,CAAC,UAAU,QAAQ,SAAS,MAAM,SAAS,CAAC,CAAC;AAAA,EACvD,CAAC;AACH;AAEO,SAAS,OAAO,UAAkB,UAAkB;AACzD,SAAO,IAAI,QAAoB,CAAC,SAAS,WAAW;AAClD,QAAI,CAAC,YAAY,CAAC,UAAU;AAC1B,aAAO,oCAAoC;AAAA,IAC7C;AACA,6BAAAA,QACG,KAAK,EAAE,SAAS,CAAC,EACjB,KAAK,CAAC,UAAwB;AAC7B,UAAI,MAAM;AAAQ,eAAO,iBAAiB;AAAA,IAC5C,CAAC,EACA;AAAA,MAAK,MACJ,gBAAAC,QACG,QAAQ,EAAE,EACV,KAAK,CAAC,SAAiB,gBAAAA,QAAO,KAAK,UAAU,IAAI,CAAC,EAClD,KAAK,CAAC,mBAA2B;AAChC,cAAM,QAAQ,IAAI,yBAAAD,QAAgB;AAAA,UAChC;AAAA,UACA;AAAA,QACF,CAAC;AACD,cAAM,KAAK,EAAE,KAAK,CAAC,YAAwB;AACzC,cAAI;AAAS,oBAAQ,OAAO;AAAA,QAC9B,CAAC;AAAA,MACH,CAAC;AAAA,IACL;AAAA,EACJ,CAAC;AACH;AAEA,IAAO,sBAAQ,EAAE,aAAa,QAAQ,OAAO;",
  "names": ["UserSchemaModel", "bcrypt"]
}
